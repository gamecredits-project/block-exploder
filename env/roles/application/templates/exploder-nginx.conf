# Enumerate all the Tornado servers here
upstream exploders {
    server 127.0.0.1:5000;
    server 127.0.0.1:5001;
}

upstream socket_url {
    server 127.0.0.1:5004;
}
# Enables limitation of the number of connections per defined key, number of connections from single IP address
# A connection is counted only if it has a request processed by the server and the whole request header has already been read.
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

# Enables rate limiting for 10 requests per second (1 request per 100 milliseconds)
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;


server {
    listen 80 default_server;
	listen [::]:80 default_server;

    {% if https %}
	server_name {{ server_name }};
	return 301 https://$server_name$request_uri;
    {% else %}

    sendfile off;
    include  /etc/nginx/mime.types;
    location /api {
        # Burst is set to 20 because if there are 2 request in the 100 millisecond gap
	    # they will get in queue that is 20 in size, and the client won't get HTTP 503

	    # Nodelay parametar allocates slots in the burst queue
	    limit_conn conn_limit_per_ip 20;
	    limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass_header Server;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_pass http://exploders;
    }

    location /socket.io {
        include proxy_params;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_pass http://socket_url/socket.io;
    }

    location {{ bootstrap_dir_server_path }} {
        root {{ ansible_env.HOME }};
        index *.zip;
    }

    {% if with_ui %}
    root {{ exploder_ui_dir }};

    location ~ ^/(scripts.*js|styles|images) {
        gzip_static on;
        expires 1y;
        add_header Cache-Control public;
        add_header ETag "";

        break;
    }

    location / {
        try_files $uri /index.html;
    }
    {% endif %}

    {% endif %}
}

{% if https %}
server {
    listen 443 ssl;
    server_name blockexplorer.gamecredits.com;
    ssl_certificate {{ ssl_certificate }};
    ssl_certificate_key {{ ssl_certificate_key }};
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;

    include  /etc/nginx/mime.types;
    sendfile off;


    location /api {
        proxy_pass_header Server;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Scheme $scheme;
        proxy_pass http://exploders;
    }

    location /socket.io {
        include proxy_params;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_pass http://socket_url/socket.io;
    }

    location {{ bootstrap_dir_server_path }} {
        root {{ ansible_env.HOME }};
        index *.zip;
    }

    {% if with_ui %}
    root {{ exploder_ui_dir }};

    location ~ ^/(scripts.*js|styles|images) {
        gzip_static on;
        expires 1y;
        add_header Cache-Control public;
        add_header ETag "";

        break;
    }

    location / {
        try_files $uri /index.html;
    }
    {% endif %}
}
{% endif %}

# server {
#     listen 81 default_server;

#     location / {
#         include proxy_params;
#         proxy_pass http://127.0.0.1:5004;
#     }

#     location /socket.io {
#         include proxy_params;
#         proxy_http_version 1.1;
#         proxy_buffering off;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "Upgrade";
#         proxy_pass http://127.0.0.1:5004/socket.io;
#     }
# }
